package org.example.demo.serviceTest;

import org.example.demo.dao.UserRepository;
import org.example.demo.dtos.AppUserDetails;
import org.example.demo.service.UserServiceImpl;
import org.example.demo.entities.User;
import org.example.demo.dtos.LoginRequest;
import org.example.demo.util.TokenUtil;
import org.example.demo.util.UserUtil;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;

import java.util.Arrays;
import java.util.Collections;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class UserServiceImplTest {

    @Mock
    private UserRepository userRepository;

    @Mock
    private TokenUtil tokenUtil;

    @Mock
    private UserUtil userUtil;

    @Mock
    private PasswordEncoder passwordEncoder;

    @Mock
    private AuthenticationManager authenticationManager;

    @InjectMocks
    private UserServiceImpl userService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testLoadUserByUsername() {
        // Arrange
        User user = createUser();
        when(userRepository.findUserByUsername("testUser")).thenReturn(Optional.of(user));

        // Act
        UserDetails userDetails = userService.loadUserByUsername("testUser");

        // Assert
        assertNotNull(userDetails);
        assertEquals("testUser", userDetails.getUsername());
        // ... other assertions
    }

//    @Test
//    public void testGenerateTokenAfterCredentialsCheck() {
//        // Arrange
//        LoginRequest loginRequest = new LoginRequest("testUser", "password");
//        when(passwordEncoder.encode(loginRequest.getPassword())).thenReturn("encodedPassword");
//        when(authenticationManager.authenticate(any())).thenReturn(null);
//        when(tokenUtil.encode(loginRequest.getUsername())).thenReturn("jwtToken");
//
//        // Act
//        String jwtToken = userService.generateTokenAfterCredentialsCheck(loginRequest);
//
//        // Assert
//        assertNotNull(jwtToken);
//        // ... other assertions
//    }

    @Test
    public void testUpdateUser() {
        // Arrange
        AppUserDetails userDetails = new AppUserDetails();
        userDetails.setId(1L);
        User user = createUser();
        when(userRepository.findById(1L)).thenReturn(Optional.of(user));
        when(userRepository.saveAndFlush(user)).thenReturn(user);

        // Act
        AppUserDetails updatedUserDetails = userService.updateUser(userDetails);

        // Assert
        assertNotNull(updatedUserDetails);
        assertEquals("testUser", updatedUserDetails.getUsername());
        // ... other assertions
    }

    // Additional test methods for other scenarios...

    private User createUser() {
        User user = new User();
        user.setId(1L);
        user.setUsername("testUser");
        user.setPassword("password");
        user.setEmail("test@example.com");
        user.setRoles("USER");
        return user;
    }
}
