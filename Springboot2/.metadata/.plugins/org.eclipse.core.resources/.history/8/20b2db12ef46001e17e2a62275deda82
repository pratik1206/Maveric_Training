package com.kuka.Wishlist.Controller;

import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.awt.PageAttributes.MediaType;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.ResponseEntity;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import com.kuka.Wishlist.controller.WishlistController;
import com.kuka.Wishlist.dao.IWishlistRepo;
import com.kuka.Wishlist.dto.DeleteResponse;
import com.kuka.Wishlist.dto.WishListRequest;
import com.kuka.Wishlist.service.WishListServiceImpl;

@ExtendWith(MockitoExtension.class)
public class WishlistControllerTest {
    WishlistController classUnderTest = new WishlistController();
    @Mock
    private WishListServiceImpl wishListServiceimpl;

    @Mock
    private IWishlistRepo iWishlistRepo;

    private MockMvc mockMvc;     

    @BeforeEach
    public void setUp() {

        ReflectionTestUtils.setField(classUnderTest, "wishListService", wishListServiceimpl);
        mockMvc = MockMvcBuilders.standaloneSetup(classUnderTest).build();

    }

    @Test
    public void addItemToWishListSuccess() {
        WishListRequest wishListRequest = PrepareWishListRequest();
        WishListRequest addedItem = PrepareWishListRequest();
        Mockito.when(wishListServiceimpl.addItemToWishList(wishListRequest)).thenReturn(addedItem);

        ResponseEntity<WishListRequest> response = classUnderTest.addItemToWishList(wishListRequest);
        Assertions.assertTrue(response.getBody().getQuantity() == 1);

    }



    @Test
    public void deleteItemFromWishListSuccess()throws Exception
    {
          String productId="abc";
          int userId=1;
        DeleteResponse deleteResponse=new DeleteResponse();
          Mockito.when(wishListServiceimpl.deleteItemFromWishList(productId,userId)).thenReturn(deleteResponse);
        ResponseEntity<Object> response = classUnderTest.deleteItemFromWishList(productId,userId);


    }

    private WishListRequest PrepareWishListRequest() {
        WishListRequest wishListRequest = new WishListRequest();

        wishListRequest.setSerialNo(1);
        wishListRequest.setCreatedAt(LocalDate.now());
        wishListRequest.setUserId(12);
        wishListRequest.setQuantity(1);
        wishListRequest.setProductId("abc");

        return wishListRequest;
    }

    @Test
    void testGetWishlistItems() throws Exception {
        List<WishListRequest> dummyWishlistItems = new ArrayList<>();
       
        when(wishListServiceimpl.retrieveItemFromWishList()).thenReturn(dummyWishlistItems);

        mockMvc = MockMvcBuilders.standaloneSetup(classUnderTest).build();

        mockMvc.perform(get("/wishlist/retrive")
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk());
       
    }


    @Test
    public void testGetWishlistItemById() throws Exception {
        int userId = 1;
        
        WishListRequest mockWishlistItem = new WishListRequest(); // Create a mock wishlist item
        
        // Mock the behavior of wishlistService.retrieveItemFromWishListByID(userId)
        when(wishListServiceimpl.retrieveItemFromWishListByID(userId))
            .thenReturn(Optional.of(mockWishlistItem));

        mockMvc.perform(MockMvcRequestBuilders.get("/wishlist/retrive/{userId}", userId))
            .andExpect(MockMvcResultMatchers.status().isOk())
            .andExpect(MockMvcResultMatchers.jsonPath("$.userId").exists()); // Assuming 'productId' is a field in WishListRequest
    }

}
